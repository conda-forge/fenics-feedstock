{% set version = "2019.2.0" %}
{% set date = "20240219" %}
{% set commit = "1c52e837eb54cc34627f90bde254be4aa8a2ae17" %}
{% set version_xy = "2019.2" %}


package:
  name: fenics-pkgs
  version: {{ version }}.dev{{ date }}

source:
  - url: https://bitbucket.org/fenics-project/dolfin/get/{{ commit }}.tar.gz
    sha256: b7254c67193a745a587b46f052f80167823a9f89f3327d813775c313d61c3bae
    patches:
      - python-cmake-args.patch
      - boost-1.86.patch

build:
  number: 3
  skip: true  # [win or ppc64le]
  # this doesn't actually affect the build hashes
  # so duplicate where the build hash should actually change
  force_use_keys:
    - python
    - mpi

outputs:
  - name: fenics-libdolfin
    build:
      script: ${RECIPE_DIR}/build-libdolfin.sh
      skip: true  # [win]
      ignore_run_exports_from:
        - python
        - numpy
        - cross-python_{{ target_platform }}
      {% set mpi_prefix = "mpi_" + mpi %}
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ stdlib("c") }}
        - {{ compiler('cxx') }}
        - cmake >=3.9
        - make
        - pkg-config
        - {{ mpi }}  # [mpi == 'openmpi' and build_platform != target_platform]
        # python needed for ufc discovery via ffc
        - python                                 # [build_platform != target_platform]
        - cross-python_{{ target_platform }}     # [build_platform != target_platform]
        - numpy  # [build_platform != target_platform]
        - fenics-ffc =={{ version }}.dev*  # [build_platform != target_platform]
      host:
        - libblas
        - libcblas
        - libboost-devel
        - eigen
        - parmetis
        - libptscotch  # [target_platform != "osx-arm64"]
        - suitesparse
        - zlib
        - {{ mpi }}
        - petsc
        - slepc
        - python
        - numpy
        - fenics-ffc =={{ version }}.dev*
        # need to list libnetcdf and netcdf-fortran twice to get version
        # pinning from conda_build_config and build pinning from {{ mpi_prefix }}
        - hdf5
        - hdf5 * {{ mpi_prefix }}_*
      run:
        # only need library dependencies that _lack_ run_exports here
        - eigen
        - parmetis
    test:
      commands:
        - test -f ${PREFIX}/lib/libdolfin${SHLIB_EXT}
        - test -f ${PREFIX}/lib/libdolfin.{{ version_xy }}${SHLIB_EXT}  # [osx]
        - test -f ${PREFIX}/lib/libdolfin${SHLIB_EXT}.{{ version_xy }}  # [linux]

  - name: fenics-dolfin
    build:
      script: ${RECIPE_DIR}/build-dolfin.sh
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ stdlib("c") }}
        - {{ compiler('cxx') }}
        - cmake >=3.9
        - make
        - pkg-config
        - python                                 # [build_platform != target_platform]
        - cross-python_{{ target_platform }}     # [build_platform != target_platform]
        - pybind11                               # [build_platform != target_platform]
        - {{ mpi }}  # [mpi == 'openmpi' and build_platform != target_platform]
      host:
        - libblas
        - libcblas
        - libboost-devel
        - python
        - pip
        - setuptools
        - pkgconfig
        - zlib
        - {{ mpi }}
        - mpi4py
        - petsc4py
        - slepc4py
        - numpy
        - pybind11
        - six
        - sympy >=1
        - {{ pin_subpackage("fenics-libdolfin", exact=True) }}
        - fenics-dijitso ==2019.1.0
        - fenics-fiat =={{ version }}.dev*
        - fenics-ufl-legacy ==2022.3.0
        - fenics-ffc =={{ version }}.dev*
        # need to list libnetcdf and netcdf-fortran twice to get version
        # pinning from conda_build_config and build pinning from {{ mpi_prefix }}
        - hdf5
        - hdf5 * {{ mpi_prefix }}_*
      run:
        - {{ compiler('cxx') }}
        # gxx provides default 'c++' executable on linux
        - gxx  # [linux]
        - python
        # dolfin depends on the boost headers for its own headers, see
        # https://bitbucket.org/fenics-project/dolfin/src/master/dolfin/parameter/Parameters.h#lines-24
        - libboost-headers
        - setuptools
        - zlib
        - {{ pin_compatible('mpi4py', max_pin='x') }}
        - petsc4py
        - slepc4py
        - pkgconfig  # Python pkgconfig package
        - pybind11
        - six
        - sympy >=1
        - {{ pin_subpackage("fenics-libdolfin", exact=True) }}
        - fenics-dijitso ==2019.1.0
        - fenics-fiat =={{ version }}.dev*
        - fenics-ufl-legacy ==2022.3.0
        - fenics-ffc =={{ version }}.dev*

    test:
      commands:
        - bash ${RECIPE_DIR}/parent/test-dolfin.sh
      source_files:
        - python/test

      requires:
        - nose
        - pytest
        - git
        - decorator

  - name: fenics
    build:
      skip: true  # [win]
      script: "echo 1"
      force_use_keys:
        - mpi
        - python
    requirements:
      build: []
      host: []
      run:
        - python
        - {{ pin_subpackage("fenics-libdolfin", exact=True) }}
        - {{ pin_subpackage("fenics-dolfin", exact=True) }}
    test:
      commands:
        - bash ${RECIPE_DIR}/parent/test-fenics.sh

about:
  home: http://www.fenicsproject.org
  license: LGPL-3.0-or-later
  license_family: LGPL
  license_file:
    - COPYING
    - COPYING.LESSER
  summary: 'FEniCS is a collection of free software for automated, efficient solution of differential equations'

  description: |
    FEniCS is a collection of free software for automated, efficient solution of differential equations
    (<http://fenicsproject.org>). It provides C++ and Python interfaces, and creates effecient solvers via
    expression of finite variational statements in a domain-specific language that are transformed and
    just-in-time compiled into efficient implementations.
  doc_url: https://fenics.readthedocs.io/
  dev_url: https://bitbucket.org/fenics-project/

extra:
  feedstock-name: fenics
  recipe-maintainers:
    - garth-wells
    - johannesring
    - mikaem
    - minrk
    - jan-janssen
    - sblauth
